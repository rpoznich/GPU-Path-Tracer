R"zzz(#version 430 core
#extension GL_ARB_texture_cube_map_array : require
#define PI 3.14159265359
#define _2PI  6.28318530717958647692

layout(binding = 1, rgba16f) uniform imageCubeArray photonMaps;

layout(binding = 0, rgba16f) uniform image2D framebuffer;
uniform samplerCubeArray cubeMaps;
uniform vec3 camera_position;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;
uniform int time;

struct box {
  vec3 min;
  vec3 max;
  vec3 kd_;
  vec3 ks_;
  ivec3 attr;
};

struct BVHNode {
  vec3 bmin;
  vec3 bmax;
  ivec3 metadata; // left right box_id
};

#define MAX_SCENE_BOUNDS 1000000.0
#define EPSILON 0.0001
float min_height = 0.0;
float max_height = 10.0;
float min_depth = 0;
float max_depth = 10;
float min_width = 0;
float max_width = 10;

layout (std430, binding = 1) buffer Boxes
{
  box[] boxes;
  //BVHNode[] nodes;
};



layout (std430, binding = 0) buffer BVHNodes
{
  BVHNode[] nodes;
};


int stack[1000];



int NUM_BOXES = boxes.length();


struct isect
{
  float tMin;
  float tMax;
  int bi;
  int face;
  bool ref;
  vec3 normal;
};


uint hash3(uint x, uint y, uint z) {
  x += x >> 11;
  x ^= x << 7;
  x += y;
  x ^= x << 3;
  x += z ^ (x >> 14);
  x ^= x << 6;
  x += x >> 15;
  x ^= x << 5;
  x += x >> 12;
  x ^= x << 9;
  return x;
}

/**
* source : 
* http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
*/
float random(vec2 pos, float time) {
  uint mantissaMask = 0x007FFFFFu;
  uint one = 0x3F800000u;
  uvec3 u = floatBitsToUint(vec3(pos, time));
  uint h = hash3(u.x, u.y, u.z);
  return uintBitsToFloat((h & mantissaMask) | one) - 1.0;
}

vec3 randomUnitVector(vec3 seeds) {
  seeds = (seeds - vec3(0.5,0.5,0.5)) * 2; //convert to [-1, 1]
  float randAngle = (seeds.x + 1.0) * PI; 

  float rand2 = sqrt(1.0 - seeds.y);
  float x = rand2 * cos(randAngle);
  float y = rand2 * sin(randAngle);
  float z = seeds.z;
  return vec3(x, y, z);
}

vec3 randomRay(vec3 seeds, vec3 n) {
  vec3 v = randomUnitVector(seeds);
  return v * sign(dot(v, n)); //invert the ray if necessary
}



bool intersectBox(vec3 origin, vec3 dir, const box b, out isect i) 
{
    vec3 vMin = (b.min - origin) / dir;
    vec3 vMax = (b.max - origin) / dir;
    vec3 t1 = min(vMin, vMax);
    vec3 t2 = max(vMin, vMax);
    i.tMin = max(max(t1.x, t1.y), t1.z);
    i.tMax = min(min(t2.x, t2.y), t2.z);
    if(i.tMax >= 0.0 && i.tMin < i.tMax && i.tMin > EPSILON)
    {
      vec3 hit = origin + dir * i.tMin;
      if (dir.x > 0.0 && abs(hit.x - b.min.x) < EPSILON){
        i.face= 1;
        i.normal = vec3(-1.0, 0.0, 0.0);
      }
      else if (dir.x < 0.0 && abs(hit.x - b.max.x) < EPSILON){
        i.face =  0;
        i.normal =vec3(1.0, 0.0, 0.0);
      }
      else if (dir.y > 0.0 && abs(hit.y - b.min.y) < EPSILON){
        i.face =  3;
        i.normal = vec3(0.0, -1.0, 0.0);
      }
      else if (dir.y < 0.0 && abs(hit.y - b.max.y) < EPSILON){
         i.face =  2;
         i.normal = vec3(0.0, 1.0, 0.0);
      }
      else if (dir.z > 0.0 && abs(hit.z - b.min.z) < EPSILON){
         i.face =  5;
         i.normal = vec3(0.0, 0.0, -1.0);
      }
      else if (dir.z < 0.0 && abs(hit.z - b.max.z) < EPSILON){
         i.face =  4;
         i.normal = vec3(0.0, 0.0, 1.0);
      }
      else{
        i.face = -1;
        return false;
      }

      return true;
    }

    return false;
}

bool intersectBoxes(vec3 origin, vec3 dir, out isect intersection) {
  float smallest = MAX_SCENE_BOUNDS;
  bool found = false;
  for (int i = 0; i < NUM_BOXES; i++) {
    isect temp;
    if (intersectBox(origin, dir, boxes[i], temp) && temp.tMin < smallest) {
      intersection = temp;
      smallest = temp.tMin;
      found = true;
      intersection.ref = boxes[i].attr[0] == 1;
      intersection.bi = i;
    }
  }
  return found;
}


bool intersectNode(vec3 origin, vec3 dir, int node, out float tMin, out float tMax)
{
  vec3 vMin = (nodes[node].bmin - origin) / dir;
  vec3 vMax = (nodes[node].bmax - origin) / dir;
  vec3 t1 = min(vMin, vMax);
  vec3 t2 = max(vMin, vMax);
  tMin = max(max(t1.x, t1.y), t1.z);
  tMax = min(min(t2.x, t2.y), t2.z);

  return tMin < tMax && tMin > EPSILON;
}

/*Under development*/
bool intersectBoxesBVH(vec3 origin, vec3 dir, out isect i)
{
  int sp = -1;
  stack[sp + 1] = 0; // i know i'm stupid :(
  ++sp;
  bool found = false;
  i.tMin = MAX_SCENE_BOUNDS;
  while(sp >= 0) // while stack not empty
  {
    int node_id = stack[sp];
    --sp;
    if(node_id != -1)
    {
      float tMin;
      float tMax;
      const BVHNode cur = nodes[node_id];
      if(cur.metadata[2] == -1)
      {
        if(intersectNode(origin, dir, node_id, tMin, tMax) && tMin < i.tMin)//terminate early
        {
          int left = cur.metadata[0];
          int right = cur.metadata[1];
          if(left != -1 || right   != -1)
          {
              stack[sp+1] = left;
              stack[sp+2] = right;
              sp+=2;
          }
        }
      } else {
        //leaf node case
            const box b = boxes[cur.metadata[2]];
            isect temp;
            if(intersectBox(origin, dir, b, temp))
            {
              if(temp.tMin < i.tMin){
                i = temp;
                i.bi = cur.metadata[2];
                i.ref = boxes[cur.metadata[2]].attr[0] == 1;
                found = true;
              }
            }
      }
    }
  }  
  return found;
}


vec2 texCoordForFace(vec3 hit, const box b, int face_id) {
  if (face_id == 0) {
    vec2 res = (hit.zy - b.min.zy) / (b.max.zy - b.min.zy);
    return vec2(1.0 - res.x, 1.0 - res.y);
  } else if (face_id == 1) {
    vec2 res = (hit.zy - b.min.zy) / (b.max.zy - b.min.zy);
    return vec2(res.x, 1.0 - res.y);
    
  } else if (face_id == 2) {
    vec2 res = (hit.xz - b.min.xz) / (b.max.xz - b.min.xz);
    return res;
  } else if (face_id == 3) {
    vec2 res = (hit.xz - b.min.xz) / (b.max.xz - b.min.xz);
    return res;
    
  } else if (face_id == 4) {
    vec2 res = (hit.xy - b.min.xy) / (b.max.xy - b.min.xy);
    return vec2(res.x, 1.0 - res.y);
  } else {
    vec2 res = (hit.xy - b.min.xy) / (b.max.xy - b.min.xy);
    return vec2(1.0 - res.x, 1.0 - res.y);
  }
}

vec2 getUV(vec3 hit, const box b, int face_id) {
  if (face_id == 0) {
    vec2 res = (hit.zy - b.min.zy) / (b.max.zy - b.min.zy);
    return vec2(1.0 - res.x, 1.0 - res.y);
  } else if (face_id == 1) {
    vec2 res = (hit.zy - b.min.zy) / (b.max.zy - b.min.zy);
    return vec2(res.x, 1.0 - res.y);
    
  } else if (face_id == 2) {
    vec2 res = (hit.xz - b.min.xz) / (b.max.xz - b.min.xz);
    return res;
  } else if (face_id == 3) {
    vec2 res = (hit.xz - b.min.xz) / (b.max.xz - b.min.xz);
    return res;
    
  } else if (face_id == 4) {
    vec2 res = (hit.xy - b.min.xy) / (b.max.xy - b.min.xy);
    return vec2(res.x, 1.0 - res.y);
  } else {
    vec2 res = (hit.xy - b.min.xy) / (b.max.xy - b.min.xy);
    return vec2(1.0 - res.x, 1.0 - res.y);
  }
}



float getWorldDistance(vec2 uv1, vec2 uv2, const box b, int face_id)
{
  if(face_id == 0 || face_id == 1) //positive/neg x
  {
    return distance(uv1 * (b.max.zy - b.min.zy), uv2 * (b.max.zy - b.min.zy));
  } else if ( face_id == 2 || face_id == 3) //positive/neg y
  {
    return distance(uv1 * (b.max.xz - b.min.xz), uv2 * (b.max.xz - b.min.xz)); 
  } else  //positive//neg z
  {
    return distance(uv1 * (b.max.xy - b.min.xy), uv2 * (b.max.xy - b.min.xy));
  }
}
vec3 getWeightedPhoton(vec3 hitPoint, int radius, float w_radius, const box b,  const isect i)
{
  vec2 uv = getUV(hitPoint, b, i.face);
  uvec3 size =  imageSize(photonMaps);
  vec2 texel = uv * size.xy;
  vec3 color = vec3(0,0,0);
  int count = 0;
  for(int x = max(0,int(texel.x) - radius); x < min(size.x,int(texel.x) + radius); ++x)
  {
    for(int y = max(0, int(texel.y) - radius); y < min(size.y, int(texel.y) + radius); ++y)
    {
      vec2 neighbor_uv = vec2(x,y) / size.xy;
      ivec3 neighbor_index = ivec3(ivec2(x,y), NUM_BOXES * 6 + i.bi*6 + i.face);
      color += max(0,1- getWorldDistance(uv, neighbor_uv, b, i.face) / w_radius) * imageLoad(photonMaps, neighbor_index).rgb;

    }
  }
  return color;
}

vec3 trace(vec3 origin, vec3 dir, ivec2 pix) {
  bool keepGoing = true;
  vec3 color = vec3(0.0, 0.0, 0.0);
  int depth = 10;
  float attenuate_factor = 1;
  bool lastState = false;
  int firstImpact = -1;
  while(depth > 0)
  {
    isect i;
    if (intersectBoxes(origin, dir, i)) {
      vec3 hitPoint = origin + dir * i.tMin;
      box b = boxes[i.bi];
      vec2 uv = getUV(hitPoint, b, i.face);

      vec3 unitPoint = (hitPoint - b.min) / (b.max - b.min) - vec3(0.5,0.5,0.5);
      float distance_attenuation = 1.0 / max(1.0,0.25 + 0.003 * distance(origin,hitPoint));
      ivec3 index = ivec3(uv * imageSize(photonMaps).xy, NUM_BOXES * 6 +  i.bi * 6 + i.face);
      vec3 r = vec3(0,0,0);
      if(depth != 10)
        r =  (texture(cubeMaps, vec4(unitPoint, float(i.bi))).rgb +  getWeightedPhoton(hitPoint, 2, 0.005, b, i))  * distance_attenuation * attenuate_factor;
      else{
        firstImpact = i.bi;
        r =  (texture(cubeMaps, vec4(unitPoint, float(i.bi))).rgb + getWeightedPhoton(hitPoint, 2, 0.005, b, i)) * distance_attenuation * attenuate_factor;
      }
        
      color += r; 
      if(!i.ref)
      {       
        break;
      } else 
      {
        attenuate_factor = 1;
        origin += i.tMin * dir + EPSILON * i.normal;
        dir = reflect(dir, i.normal);
      }
      depth--;
    } else 
      break;
  }
  if(firstImpact != -1)
    color *= boxes[firstImpact].kd_;
  return color;
}




layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
  ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(framebuffer);
  if (pix.x >= size.x || pix.y >= size.y) {
    return;
  }

  vec4 oldColor = imageLoad(framebuffer,pix).rgba;
  vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
  vec3 dir = normalize(mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x));
 
  vec3 color = trace(camera_position, dir, pix);
  imageStore(framebuffer, pix, vec4(color,oldColor.a + 1));
  
})zzz"