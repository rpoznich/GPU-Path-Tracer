R"zzz(#version 430 core


layout(binding = 1, rgba16f) uniform imageCubeArray photonMaps;

uniform vec4 light_position;

uniform int time;
#define _2PI  6.28318530717958647692


#define PI 3.14159265359
float PHI = 1.61803398874989484820459 * 00000.1; // Golden Ratio   
float s_PI  = 3.14159265358979323846264 * 00000.1; // PI
float SQ2 = 1.41421356237309504880169 * 10000.0; // Square Root of Two
struct box {
  vec3 min;
  vec3 max;
  vec3 kd_;
  vec3 ks_;
  ivec3 attr;
};

struct BVHNode {
  vec3 bmin;
  vec3 bmax;
  ivec3 metadata; // left right box_id
};


#define MAX_SCENE_BOUNDS 1000000.0

#define EPSILON 0.0001
float min_height = 0.0;
float max_height = 10.0;
float min_depth = 0;
float max_depth = 10;
float min_width = 0;
float max_width = 10;
// const box boxes[] = box[21](
//   /* Box in the middle */
//   /* The ground */
//    box(vec3(43, 0.5, 43), vec3(44, 1.5, 44), vec3(0.0,0.5,0.5), vec3(0.3,0.3,0.3), false),
//   box(vec3(44, 0.0, 43), vec3(45, 0.1, 44), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(45, 0.0, 43), vec3(46, 0.1, 44), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(46, 0.0, 43), vec3(47, 0.1, 44), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(47, 0.5, 43), vec3(48, 1.5, 44), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(43, 0.0, 44), vec3(44, 0.1, 45), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(44, 0.0, 44), vec3(45, 0.1, 45), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(45, 0.0, 44), vec3(46, 0.1, 45), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(46, 0.0, 44), vec3(47, 0.1, 45), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(47, 0.0, 44), vec3(48, 0.1, 45), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(43, 0.0, 45), vec3(44, 0.1, 46), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(44, 0.0, 45), vec3(45, 0.1, 46), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(45, 0.0, 45), vec3(46, 0.1, 46), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(46, 0.0, 45), vec3(47, 0.1, 46), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(47, 0.0, 45), vec3(48, 0.1, 46), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(43, 0.0, 46), vec3(44, 0.1, 47), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(44, 0.0, 46), vec3(45, 0.1, 47), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(45, 0.0, 46), vec3(46, 0.1, 47), vec3(0.3,0.3,0.3), vec3(0.3,0.3,0.3), false),
//   box(vec3(46, 0.5, 46), vec3(47, 1.5, 47), vec3(0.5,0.30,0.5), vec3(0.3,0.3,0.3), false),
//   box(vec3(47, 0.0, 46), vec3(48, 0.1, 47), vec3(0.3,0.3,0.3), vec3(0.5,0.5,0.5), false),
//   box(vec3(45.3, 1.0, 44.5), vec3(46.3, 2.0, 45.5), vec3(0.2,0.2,0.04), vec3(0.5,0.5,0.5), true)
// );


layout (std430, binding = 1) buffer Boxes
{
  box[] boxes;
  // /BVHNode[] nodes;
};

int NUM_BOXES = boxes.length();


struct isect
{
  float tMin;
  float tMax;
  int bi;
  int face;
  bool ref;
  vec3 normal;
};

uint hash3(uint x, uint y, uint z) {
  x += x >> 11;
  x ^= x << 7;
  x += y;
  x ^= x << 3;
  x += z ^ (x >> 14);
  x ^= x << 6;
  x += x >> 15;
  x ^= x << 5;
  x += x >> 12;
  x ^= x << 9;
  return x;
}

/**
* source : 
* http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
*/
float random(vec2 pos, float time) {
  uint mantissaMask = 0x007FFFFFu;
  uint one = 0x3F800000u;
  uvec3 u = floatBitsToUint(vec3(pos, time));
  uint h = hash3(u.x, u.y, u.z);
  return uintBitsToFloat((h & mantissaMask) | one) - 1.0;
}

vec3 randomUnitVector(vec3 seeds) {
  seeds = (seeds - vec3(0.5,0.5,0.5)) * 2; //convert to [-1, 1]
  float randAngle = (seeds.x + 1.0) * PI; 

  float rand2 = sqrt(1.0 - seeds.y);
  float x = rand2 * cos(randAngle);
  float y = rand2 * sin(randAngle);
  float z = seeds.z;
  return vec3(x, y, z);
}

vec3 randomRay(vec3 seeds, vec3 n) {
  vec3 v = randomUnitVector(seeds);
  return v * sign(dot(v, n)); //invert the ray if necessary
}




bool intersectBox(vec3 origin, vec3 dir, const box b, out isect i) 
{
        vec3 tMin = (b.min - origin) / dir;
        vec3 tMax = (b.max - origin) / dir;
        vec3 t1 = min(tMin, tMax);
        vec3 t2 = max(tMin, tMax);
        i.tMin = max(max(t1.x, t1.y), t1.z);
        i.tMax = min(min(t2.x, t2.y), t2.z);
        if(i.tMax >= 0.0 && i.tMin < i.tMax && i.tMin > EPSILON)
        {
          vec3 hit = origin + dir * i.tMin;
          if (dir.x > 0.0 && abs(hit.x - b.min.x) < EPSILON){
            i.face= 1;
            i.normal = vec3(-1.0, 0.0, 0.0);
          }
          else if (dir.x < 0.0 && abs(hit.x - b.max.x) < EPSILON){
            i.face = 0;
            i.normal =vec3(1.0, 0.0, 0.0);
          }
          else if (dir.y > 0.0 && abs(hit.y - b.min.y) < EPSILON){
            i.face =  3;
            i.normal = vec3(0.0, -1.0, 0.0);
          }
          else if (dir.y < 0.0 && abs(hit.y - b.max.y) <EPSILON){
             i.face =  2;
             i.normal = vec3(0.0, 1.0, 0.0);
          }
          else if (dir.z > 0.0 && abs(hit.z - b.min.z) < EPSILON){
             i.face =  5;
             i.normal = vec3(0.0, 0.0, -1.0);
          }
          else if (dir.z < 0.0 && abs(hit.z - b.max.z) < EPSILON){
             i.face =  4;
             i.normal = vec3(0.0, 0.0, 1.0);
          }
          else{
            i.face = -1;
            return false;
          }

          return true;
        }

        return false;
}

vec2 intersectBox(vec3 origin, vec3 dir, const box b) {
  vec3 tMin = (b.min - origin) / dir;
  vec3 tMax = (b.max - origin) / dir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);
  return vec2(tNear, tFar);
}

bool intersectBoxes(vec3 origin, vec3 dir, out isect intersection) {
  float smallest = MAX_SCENE_BOUNDS;
  bool found = false;
  for (int i = 0; i < NUM_BOXES; i++) {
    isect temp;
    if (intersectBox(origin, dir, boxes[i], temp) && temp.tMin < smallest) {
      intersection = temp;
      smallest = temp.tMin;
      found = true;
      intersection.ref = boxes[i].attr[0] == 1;
      intersection.bi = i;
    }
  }
  return found;
}

vec2 getUV(vec3 hit, const box b, int face_id) {
  if (face_id == 0) {
    vec2 res = (hit.zy - b.min.zy) / (b.max.zy - b.min.zy);
    return vec2(1.0 - res.x, 1.0 - res.y);
  } else if (face_id == 1) {
    vec2 res = (hit.zy - b.min.zy) / (b.max.zy - b.min.zy);
    return vec2(res.x, 1.0 - res.y);
    
  } else if (face_id == 2) {
    vec2 res = (hit.xz - b.min.xz) / (b.max.xz - b.min.xz);
    return res;
  } else if (face_id == 3) {
    vec2 res = (hit.xz - b.min.xz) / (b.max.xz - b.min.xz);
    return res;
    
  } else if (face_id == 4) {
    vec2 res = (hit.xy - b.min.xy) / (b.max.xy - b.min.xy);
    return vec2(res.x, 1.0 - res.y);
  } else {
    vec2 res = (hit.xy - b.min.xy) / (b.max.xy - b.min.xy);
    return vec2(1.0 - res.x, 1.0 - res.y);
  }
}

vec3 getFaceNormal(int face_id)
{
  if (face_id == 1)
    return vec3(-1.0, 0.0, 0.0);
  else if (face_id == 0)
    return vec3(1.0, 0.0, 0.0);
  else if (face_id == 3)
    return vec3(0.0, -1.0, 0.0);
  else if (face_id == 2)
    return vec3(0.0, 1.0, 0.0);
  else if (face_id == 5)
    return vec3(0.0, 0.0, -1.0);
  else
    return vec3(0.0, 0.0, 1.0);
}

void trace(vec3 origin, vec3 dir, float atten) {
  bool keepGoing = true;
  int depth = 3;
  float attenuate_factor = atten;
  ivec3 size = imageSize(photonMaps);

  while(depth > 0 && attenuate_factor >= EPSILON)
  {
    isect i;
    if (intersectBoxes(origin, dir, i)) {
  		box b = boxes[i.bi];
  		vec3 hitPoint = origin + i.tMin * dir;
  		int face_id = i.face;
  		float distance_attenuation = 1.0 / max(1.0,distance(origin,hitPoint));
  		attenuate_factor *= distance_attenuation;
  		vec2 texCoord = getUV(hitPoint, b, face_id);
  		ivec3 index = ivec3(texCoord * size.xy, i.bi * 6 + face_id);
      ivec3 scatter_index = ivec3(texCoord * size.xy, NUM_BOXES * 6 + i.bi * 6 + face_id);

  		float color = attenuate_factor;
  		vec2 oldColor = imageLoad(photonMaps, index).rg;
  		float numPhotons = oldColor.g;
  		float blended = oldColor.r;
  		blended += 1.0;
  		imageStore(photonMaps, index, vec4(max(0,blended), numPhotons, 0.0, 1.0));
      imageStore(photonMaps, scatter_index, vec4(imageLoad(photonMaps,scatter_index).r + color, imageLoad(photonMaps,scatter_index).g, 0.0, 1.0));
  		if(i.ref){
  			origin = hitPoint;
  			dir = reflect(dir, i.normal);
  		} else {
  			break;
  		}
  		depth--;
    } else 
      break;
  }
}



vec3 getWorldCoord(vec2 uv, const box b, int face_id)
{
   if (face_id == 0) {
    float length_u = b.max.z - b.min.z;
    float length_v = b.max.y - b.min.y;
    vec3 res = vec3(b.max.x, b.max.y - uv.y * length_v, b.max.z - uv.x * length_u);
    //vec3 res = b.min.zy + (b.max.zy - b.min.zy) * ;
    return res;
  } else if (face_id == 1) {
    float length_u = b.max.z - b.min.z;
    float length_v = b.max.y - b.min.y;
    vec3 res = vec3(b.min.x, b.max.y - uv.y * length_v, b.min.z + uv.x * length_u);
    //vec2 res = (hit.zy - b.min.zy) / (b.max.zy - b.min.zy);
    return res;
    
  } else if (face_id == 2) {
    float length_u = b.max.x - b.min.x;
    float length_v = b.max.z - b.min.z;
    vec3 res = vec3(b.min.x + uv.x * length_u, b.max.y, b.min.z + uv.y * length_v);
    //vec2 res = (hit.xz - b.min.xz) / (b.max.xz - b.min.xz);
    return res;
  } else if (face_id == 3) {
    float length_u = b.max.x - b.min.x;
    float length_v = b.max.z - b.min.z;
    vec3 res = vec3(b.min.x + uv.x * length_u, b.min.y, b.min.z + uv.y * length_v);
    //vec2 res = (hit.xz - b.min.xz) / (b.max.xz - b.min.xz);
    return res;
    
  } else if (face_id == 4) {
    float length_u = b.max.x - b.min.x;
    float length_v = b.max.y - b.min.y;
    vec3 res = vec3(b.min.x + uv.x * length_u, b.max.y - uv.y * length_v, b.max.z);
    //vec2 res = (hit.xy - b.min.xy) / (b.max.xy - b.min.xy);
    return res;
  } else {
    float length_u = b.max.x - b.min.x;
    float length_v = b.max.y - b.min.y;
    vec3 res = vec3(b.max.x - uv.x * length_u, b.max.y - uv.y * length_v, b.min.z);
    //vec2 res = (hit.xy - b.min.xy) / (b.max.xy - b.min.xy);
    return res;
  }
}

vec3 getSeeds(vec2 co, float t)
{
  float rand1 = random(co, t);
  float rand2 = random(co + vec2(641.51224, 423.178), t);
  float rand3 = random(co - vec2(147.16414, 363.941), t);
  return vec3(rand1,rand2,rand3);
}

vec3 getRandomPoint(vec3 seeds, ivec3 size)
{
  float rand1 = seeds[0];
  float rand2 = seeds[1];
  float rand3 = seeds[2];
  int box_id = int(rand3 * float(NUM_BOXES * 6)) / 6;
  const box targetBox = boxes[box_id];
  int face_id =  int(rand3 * float(NUM_BOXES * 6)) % 6;
  vec3 point_to_scatter = vec3(0,0,0);
  float y_length = targetBox.max.y - targetBox.min.y;
  float z_length = targetBox.max.z - targetBox.min.z;
  float x_length = targetBox.max.x - targetBox.min.x;
  if(face_id == 0) // positive x
    point_to_scatter = vec3(targetBox.max.x, targetBox.min.y + rand1 * y_length, targetBox.min.z + rand2 * z_length);
  else if (face_id == 1)
    point_to_scatter = vec3(targetBox.min.x, targetBox.min.y + rand1 * y_length, targetBox.min.z + rand2 * z_length);
  else if (face_id == 2) //pos y
    point_to_scatter = vec3(targetBox.min.x + rand1 * x_length, targetBox.max.y, targetBox.min.z + rand2 * z_length);
  else if (face_id == 3) //neg y
    point_to_scatter = vec3(targetBox.min.x + rand1 * x_length, targetBox.min.y, targetBox.min.z + rand2 * z_length);
  else if (face_id == 4) //pos z
    point_to_scatter = vec3(targetBox.min.x + rand1 * x_length, targetBox.min.y + rand2 * y_length, targetBox.max.z);
  else
    point_to_scatter = vec3(targetBox.min.x + rand1 * x_length, targetBox.min.y + rand2 * y_length, targetBox.min.z);
  return point_to_scatter;
}


layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
  vec2 invId = vec2(gl_GlobalInvocationID.xy);

  float rand1 = random(invId, time);
  float rand2 = random(invId + vec2(641.51224, 423.178), time);
  float rand3 = random(invId - vec2(147.16414, 363.941), time);
  /* Set global 'rand' variable */
  vec3 seeds = vec3(rand1, rand2, rand3);

  ivec3 size = imageSize(photonMaps);
  int box_id = int(rand3 * float(NUM_BOXES * 6)) / 6;
  const box targetBox = boxes[box_id];
  int face_id =  int(rand3 * float(NUM_BOXES * 6)) % 6;
  vec3 point_to_scatter = vec3(0,0,0);
  float y_length = targetBox.max.y - targetBox.min.y;
  float z_length = targetBox.max.z - targetBox.min.z;
  float x_length = targetBox.max.x - targetBox.min.x;
  if(face_id == 0) // positive x
    point_to_scatter = vec3(targetBox.max.x, targetBox.min.y + rand1 * y_length, targetBox.max.z - rand2 * z_length);
  else if (face_id == 1)
    point_to_scatter = vec3(targetBox.min.x, targetBox.min.y + rand1 * y_length, targetBox.min.z + rand2 * z_length);
  else if (face_id == 2) //pos y
    point_to_scatter = vec3(targetBox.min.x + rand1 * x_length, targetBox.max.y, targetBox.min.z + rand2 * z_length);
  else if (face_id == 3) //neg y
    point_to_scatter = vec3(targetBox.min.x + rand1 * x_length, targetBox.min.y, targetBox.min.z + rand2 * z_length);
  else if (face_id == 4) //pos z
    point_to_scatter = vec3(targetBox.min.x + rand1 * x_length, targetBox.min.y + rand2 * y_length, targetBox.max.z);
  else
    point_to_scatter = vec3(targetBox.max.x - rand1 * x_length, targetBox.min.y + rand2 * y_length, targetBox.min.z);

  vec2 uv = getUV(point_to_scatter, targetBox, face_id);
  ivec3 index = ivec3(uv * size.xy, box_id * 6 + face_id);
  ivec3 scatter_index = ivec3(uv * size.xy, NUM_BOXES * 6 +  box_id * 6 + face_id);
  float rand4 = random(uv, time);
  float rand5 = random(uv + vec2(641.51224, 423.178), time);
  float rand6 = random(uv - vec2(147.16414, 363.941), time);

  vec3 face_normal = getFaceNormal(face_id);
  vec3 ray = normalize(randomRay(vec3(rand4,rand5,rand6), face_normal));
  ray *= dot(face_normal, ray);
  vec4 oldPhotons = imageLoad(photonMaps, scatter_index);
  vec4 directLight = imageLoad(photonMaps, index);
  vec3 transferPhotons = vec3(1.0,1.0,1.0) * dot(ray,face_normal);
  
  float attenuate_factor = 1.0;
  vec3 origin = point_to_scatter + EPSILON * face_normal;
  int depth = 0;
  float prev_photons = oldPhotons.a;
  bool found = false;
  float totalDistance = 0;
  while(depth < 4 && oldPhotons.a < 10)
  {
    isect i;
    if(intersectBoxes(origin, ray, i))
    {
      vec3 hitPoint = origin + ray * i.tMin;
      uv = getUV(hitPoint, boxes[i.bi], i.face);
      index = ivec3(uv*size.xy, i.bi * 6 + i.face);
      directLight = imageLoad(photonMaps, index);
      totalDistance += i.tMin;
      if(directLight.a > 1.0) //if direct light hits here
      {
        found = true;
        imageStore(photonMaps, scatter_index, vec4(oldPhotons.rgb + transferPhotons * directLight.rgb * boxes[i.bi].kd_ * min(1.0,1.0 / (0.25 + 0.03* totalDistance)), oldPhotons.a + 1));
      }
      // if(i.ref)
      // {
      //   origin = hitPoint + EPSILON * face_normal;
      //   face_normal = i.normal;
      //   ray = reflect(ray, i.normal);
      //   transferPhotons *= boxes[i.bi].kd_  * dot(ray, face_normal);
      //   br
      // } else 
      // {
        origin = hitPoint + EPSILON * face_normal;
        face_normal = i.normal;
        rand4 = random(uv, time);
        rand5 = random(uv + vec2(641.51224, 423.178), time);
        rand6 = random(uv - vec2(147.16414, 363.941), time);
        ray = normalize(randomRay(vec3(rand4,rand5,rand6), face_normal));
        ray *= dot(face_normal, ray);
        transferPhotons *= boxes[i.bi].kd_ * dot(ray, face_normal);
      //}
      depth++;
    } else {
      break;
    } 
  }
 
}
)zzz"
